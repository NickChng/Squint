<Window x:Class="SquintScript.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SquintScript"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        xmlns:dd="urn:gong-wpf-dragdrop"
        WindowStartupLocation="CenterScreen"
        xmlns:controls="clr-namespace:System.Windows.Controls"
        xmlns:SC ="clr-namespace:SquintScript.Controls"
        x:Name="SquintWindow"
        Icon="/Resources/squint_icon.ico"
        Title="Squint v0.5.2" Height="900" Width="1250" Closing="OnClosing" MinWidth="1250">
    <Window.DataContext>
        <local:Presenter/>
    </Window.DataContext>
    <Window.Resources>
        <local:VisibilityMultiConverter x:Key="VisibilityMultiConverter"/>
        <local:ResultFlagColorConverter2 x:Key="ResultFlagColorConverter2"/>
        <local:DoubleToDisplay x:Key="DoubleToDisplay"/>
        <local:TestConverter x:Key="TestConverter"/>
        <local:ExpanderConverter x:Key="ExpanderConverter"/>
        <local:ScrollBarVisibilityConverter x:Key="ScrollBarVisibilityConverter"/>
        <local:SelectionConverter x:Key="SelectionConverter"/>
        <local:ConstraintSelectedHighlight x:Key="ConstraintSelectedHighlight"/>
        <local:RefreshListConverter x:Key="RefreshListConverter"/>
        <local:Color2Brush x:Key="Color2Brush"/>
        <local:SortStructuresConverter x:Key="SortStructuresConverter"/>
        <local:VisibilityConverter x:Key="VisibilityConverter"/>
        <local:VisibilityInverseConverter x:Key="VisibilityInverseConverter"/>
        <local:RowHeaderConverter x:Key="RowHeaderConverter"/>
        <local:RowHeaderBackGroundColorConverter x:Key="RowHeaderBackGroundColorConverter"/>
        <local:VisBoolToHeight x:Key="VisBoolToHeight"/>
        <local:StructureDisplayConverter x:Key="StructureDisplayConverter"/>
        <local:VisibilityStructureEditorConverter x:Key="VisibilityStructureEditorConverter"/>
        <local:ToStringConverter x:Key="ToStringConverter"/>
        <local:GetConstraintStructureConverter x:Key="GetConstraintStructureConverter"/>
        <local:EnumDisplayTypesConverter x:Key="EnumDisplayTypesConverter"/>
        <local:ShowConstraintEditor x:Key="ShowConstraintEditor"/>
        <local:ResultConverter2 x:Key="ResultConverter2"/>
        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="White"></Setter>
        </Style>
        <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewItemStyle" TargetType="ListViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Trun off default selection-->
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Grid>
                            <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="1" 
                                Margin="2,2,2,2"
                                CornerRadius="5,5,5,5"
                            Background="Transparent"
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                            </Border>
                            <ContentPresenter Name="CP"
                                Margin="8,5,8,5"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}"/>
                                <!--<Setter TargetName="Bd" Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, UpdateSourceTrigger=PropertyChanged}" Opacity="0.1"/>
                                    </Setter.Value>
                                </Setter>-->
                                <Setter TargetName="Bd" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect ShadowDepth="0.2" Color="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}" Opacity="0.3" BlurRadius="1"/>
                                    </Setter.Value>
                                </Setter>
                                <!--<Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>-->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorLevel=3, AncestorType=Grid}, Path=IsMouseOver}" Value="false">
                    <DataTrigger.Setters>
                        <Setter Property="IsSelected" Value="false"></Setter>
                        <!--unselects all items after leaving control so they aren't expanded when focus returns-->
                    </DataTrigger.Setters>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </DataTrigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </Trigger>
                <!--<MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        -->
                <!--custom selection colours-->
                <!--
                        <Setter Property="FontWeight" Value="Bold" />
                        -->
                <!--<Setter Property="BorderThickness" Value="4" />-->
                <!--<Setter Property="BorderBrush" Value="PapayaWhip" />-->
                <!--<Setter Property="Foreground" Value="Black"/>-->
                <!--
                    </MultiTrigger.Setters>
                </MultiTrigger>-->
            </Style.Triggers>
        </Style>
        <Style x:Key="AlternatingListViewItemStyle" TargetType="{x:Type ListViewItem}">
            <Style.Triggers>
                <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                    <Setter Property="Background" Value="AliceBlue"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SquintRowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Background" Value="White" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Width" Value="{Binding ElementName=SquintWindow,Path=DataContext.AssessmentPresenter.RowHeaderWidth, UpdateSourceTrigger=PropertyChanged}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid IsHitTestVisible="False">
                            <Grid Margin="5,0,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" HorizontalAlignment="Left" Text="{Binding Component.ComponentName}" Margin="0,5,10,0" FontSize="{Binding ElementName=SquintWindow, UpdateSourceTrigger=PropertyChanged, Path=DataContext.AssessmentPresenter.FontSize}"/>
                                <ItemsControl Grid.Column="1" Foreground="Black" HorizontalAlignment="Left" VerticalAlignment="Center" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                                    <ItemsControl.ItemsSource>
                                        <MultiBinding Converter="{StaticResource RefreshListConverter}" UpdateSourceTrigger="PropertyChanged">
                                            <Binding UpdateSourceTrigger="PropertyChanged"/>
                                            <Binding Path="RefreshFlag" UpdateSourceTrigger="PropertyChanged" FallbackValue="0"/>
                                        </MultiBinding>
                                    </ItemsControl.ItemsSource>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch" Background="Transparent"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Ellipse Width="12" Height="12" Margin="10,0,10,0">
                                                <Ellipse.Fill>
                                                    <Binding Converter="{StaticResource Color2Brush}" UpdateSourceTrigger="PropertyChanged"/>
                                                </Ellipse.Fill>
                                            </Ellipse>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <TextBlock Grid.Column="2" HorizontalAlignment="Left" Margin="5,5,5,5" FontWeight="Medium" VerticalAlignment="Center" FontSize="{Binding ElementName=SquintWindow, UpdateSourceTrigger=PropertyChanged, Path=DataContext.AssessmentPresenter.FontSize}">
                                    <TextBlock.Foreground>
                                        <MultiBinding Converter="{StaticResource ConstraintSelectedHighlight}" UpdateSourceTrigger="PropertyChanged">
                                            <Binding Path="DataContext.Protocol.SelectedConstraint" ElementName="SquintWindow" UpdateSourceTrigger="PropertyChanged"/>
                                            <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRowHeader}}" UpdateSourceTrigger="PropertyChanged"/>
                                        </MultiBinding>
                                    </TextBlock.Foreground>
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource RowHeaderConverter}" UpdateSourceTrigger="PropertyChanged" Mode="OneWay">
                                            <Binding />
                                            <Binding Path="RefreshRowHeader" UpdateSourceTrigger="PropertyChanged"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewItemStyle2" TargetType="ListViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Trun off default selection-->
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Grid>
                            <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="0"  Margin="2,2,2,2" CornerRadius="5,5,5,5" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter Margin="8,8,8,8" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorLevel=2, AncestorType=Border}, Path=IsMouseOver}" Value="false">
                    <DataTrigger.Setters>
                        <Setter Property="IsSelected" Value="false"></Setter>
                        <!--unselects all items after leaving control so they aren't expanded when focus returns-->
                    </DataTrigger.Setters>
                </DataTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <!--<Setter Property="Background">
                            <Setter.Value>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="LightSteelBlue" Offset="0.5"/>
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                                -->
                        <!--<SolidColorBrush Color="LightSteelBlue" Opacity="0.5"/>-->
                        <!--
                            </Setter.Value>
                        </Setter>-->
                        <!--custom selection colours-->
                        <Setter Property="FontWeight" Value="Bold" />
                        <Setter Property="BorderThickness" Value="4" />
                        <Setter Property="BorderBrush" Value="PapayaWhip" />
                        <Setter Property="Foreground" Value="Black"/>
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ConstraintComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="AliceBlue"></Setter>
            <Setter Property="BorderBrush" Value="LightSteelBlue"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
            <Setter Property="Margin" Value="5,5,5,5"></Setter>
        </Style>
        <Style x:Key="ConstraintTextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="AliceBlue"></Setter>
            <Setter Property="Margin" Value="5,5,5,5"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="Transparent" Stroke="#FF989898">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DraggableListViewItemStyle" TargetType="ListViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <!-- Trun off default selection-->
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Grid>
                            <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="1" 
                                Margin="2,2,2,2"
                                CornerRadius="5,5,5,5"
                            Background="Transparent"
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                            </Border>
                            <ContentPresenter Name="CP"
                                Margin="8,2,8,2"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter TargetName="Bd" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect ShadowDepth="0.2" Color="{Binding Path=DataContext.Color, RelativeSource={RelativeSource AncestorType=ListViewItem}, Converter={StaticResource Color2Brush}, UpdateSourceTrigger=PropertyChanged}" Opacity="0.3" BlurRadius="1"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorLevel=3, AncestorType=Grid}, Path=IsMouseOver}" Value="false"/>
                        <Condition Binding="{Binding ElementName=SquintWindow, Path=DataContext.Protocol.DragSelected}" Value="false"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsSelected" Value="false"></Setter>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </DataTrigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="FontWeight" Value="Bold" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ListBoxStyle1" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Grid>
                            <Rectangle Fill="White" RadiusX="10" RadiusY="10" Opacity="0.195" />
                            <Border CornerRadius="10" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                                <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Template="{DynamicResource ScrollViewerControlTemplate1}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="True" CanVerticallyScroll="True" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" />
                <ScrollBar x:Name="PART_VerticalScrollBar" Margin="3,0,3,0" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{DynamicResource ScrollBarStyle1}"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="ScrollViewerControlTemplate2" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Row="0" Margin="{TemplateBinding Padding}" />
                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Style="{DynamicResource ScrollBarStyleHorizontal}"
                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
            </Grid>
        </ControlTemplate>
        <LinearGradientBrush x:Key="VerticalScrollBarBackground" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="#F4F4F4"/>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Height="Auto" Width="8" Fill="AntiqueWhite" RadiusX="5" RadiusY="5" Margin="0,10,0,10">
                            <Rectangle.Effect>
                                <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="CornflowerBlue" />
                            </Rectangle.Effect>
                        </Rectangle>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb_Horizontal" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Rectangle Width="Auto" Height="8" Fill="AntiqueWhite" RadiusX="5" RadiusY="5" Margin="1,0,1,0">
                            <Rectangle.Effect>
                                <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="CornflowerBlue" />
                            </Rectangle.Effect>
                        </Rectangle>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="HorizontalScrollBarBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#E1E1E1" Offset="0"/>
            <GradientStop Color="#EDEDED" Offset="0.20"/>
            <GradientStop Color="#EDEDED" Offset="0.80"/>
            <GradientStop Color="#E3E3E3" Offset="1"/>
        </LinearGradientBrush>
        <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Border Width="1" Background="CornflowerBlue" HorizontalAlignment="Center" Margin="0,20,0,20"/>
                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="MinWidth" Value="0"/>
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                    <Setter Property="Background" Value="{StaticResource HorizontalScrollBarBackground}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                        <ColumnDefinition Width="0.00001*"/>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"/>
                                    <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}" ViewportSize="NaN">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Style="{StaticResource ScrollBarThumb}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                        </Track.Thumb>
                                    </Track>
                                    <RepeatButton Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ScrollBarStyleHorizontal" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="Transparent" SnapsToDevicePixels="true">
                            <Border Width="Auto" Background="CornflowerBlue" Height="1" HorizontalAlignment="Stretch" Margin="0,0,0,0"/>
                            <Track x:Name="PART_Track"  IsDirectionReversed="false" IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource ScrollBarThumb_Horizontal}" Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="2,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboWithHeader" TargetType="ContentControl">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" Content="{Binding ComboBoxHeader, UpdateSourceTrigger=PropertyChanged, FallbackValue='ComboBox Placeholder'}" DataContext="{TemplateBinding DataContext}" Height="Auto"
                   Padding="5,0,5,1" Margin="10,5,0,5" Target="comboBox" />
                <ComboBox Grid.Column="1" x:Name="comboBox" FontSize="12" Style="{DynamicResource ConstraintComboBoxStyle}" Margin="0,0,5,5" DataContext="{TemplateBinding DataContext}" Padding="5,5,5,5"/>
            </Grid>
        </ControlTemplate>
        <Style x:Key="ButtonStyle" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        </Style>
        <Style x:Key="ButtonStyle_Medium" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="1" Padding="3,2" BorderBrush="Transparent" CornerRadius="3" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="CornFlowerBlue" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_Small" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="border" BorderThickness="1" Padding="3,2" BorderBrush="Transparent" CornerRadius="3" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="CornFlowerBlue" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_Small_LoadProtocol" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        </Style>
        <Style x:Key="ButtonStyleConstraint" TargetType="Button">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="20"/>
            <Setter Property="Margin" Value="0,0,10,0"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        </Style>
        <Storyboard x:Key="CollapsePanel" Duration="0:0:0.5">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="Tag" By="0.01" To="0"/>
        </Storyboard>
        <Storyboard x:Key="ExpandPanel" Duration="0:0:0.5">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="Tag" By="0.01" To="1"/>
        </Storyboard>
        <Storyboard x:Key="Shrink" Duration="0:0:0.2">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.2" Storyboard.TargetName="border_textBox_PID" Storyboard.TargetProperty="Width" From="0" To="150"/>
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.2" Storyboard.TargetName="textBox_PID" Storyboard.TargetProperty="Width" From="0" To="150"/>
        </Storyboard>
        <Storyboard x:Key="StructurePropertiesRollDown" Duration="0:0:0.5">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="MaxHeight" From="0" To="500"/>
        </Storyboard>
        <Storyboard x:Key="StructurePropertiesRollUp" Duration="0:0:0.5">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="MaxHeight" From="500" To="0"/>
        </Storyboard>
        <Storyboard x:Key="RollDown" Duration="0:0:0.5">
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="MaxHeight" From="0" To="500"/>
            <!--<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" BeginTime="0:0:0">
                <SplineThicknessKeyFrame KeyTime="0:0:0.5" Value="5,0,5,5"/>
            </ThicknessAnimationUsingKeyFrames>-->
        </Storyboard>
        <Storyboard x:Key="RollUp" Duration="0:0:0.5">
            <!--<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" BeginTime="0:0:0">
                <SplineThicknessKeyFrame KeyTime="0:0:0.5" Value="5,0,5,0"/>
            </ThicknessAnimationUsingKeyFrames>-->
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.5" Storyboard.TargetProperty="MaxHeight" From="500" To="0"/>
        </Storyboard>
        <Storyboard x:Key="Grow" Duration="0:0:0.2">
            <!--<ThicknessAnimationUsingKeyFrames Storyboard.TargetName="PatientAssessmentBorder" Storyboard.TargetProperty="Margin" BeginTime="0:0:0">
                <SplineThicknessKeyFrame KeyTime="0:0:0.2" Value="10,5,0,5"/>
            </ThicknessAnimationUsingKeyFrames>-->
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.2" Storyboard.TargetName="border_textBox_PID" Storyboard.TargetProperty="Width" From="150" To="0"/>
            <DoubleAnimation BeginTime="0:0:0" Duration="0:0:0.2" Storyboard.TargetName="textBox_PID" Storyboard.TargetProperty="Width" From="150" To="0"/>
        </Storyboard>
        <DataTemplate x:Key="AssessmentHeader">
            <Grid HorizontalAlignment="Stretch">
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.isPIDVisible, ElementName=SquintWindow}" Value="True">
                                <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=textBox_PID}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" Name="PatientAssessmentBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="CornflowerBlue" Width="Auto" CornerRadius="5,5,5,5" Margin="10,5,0,5">
                    <DockPanel>
                        <TextBlock DockPanel.Dock="Left" Text="Patient Assessments" Foreground="White" FontSize="20" FontWeight="Bold" FontFamily="Arial" VerticalAlignment="Center" Margin="10,0,0,0" Padding="0,3,0,0"></TextBlock>
                        <TextBlock DockPanel.Dock="Right" Text="{Binding DataContext.PatientPresenter.FullPatientName, UpdateSourceTrigger=PropertyChanged, ElementName=SquintWindow}" 
                                    Visibility="{Binding DataContext.isPIDVisible, ElementName=SquintWindow, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" 
                                   HorizontalAlignment="Right" Foreground="LightGoldenrodYellow" FontSize="20" FontWeight="Bold" FontFamily="Arial" VerticalAlignment="Center" Margin="0,0,20,0" Padding="0,3,0,0"></TextBlock>
                    </DockPanel>
                </Border>
                <Border Grid.Column="1" Name="border_textBox_PID" Background="{Binding DataContext.PatientPresenter.TextBox_Background_Color,ElementName=SquintWindow, UpdateSourceTrigger=PropertyChanged}" CornerRadius="5,5,5,5" Margin="5,5,0,5" Width="0" HorizontalAlignment="Right">
                    <TextBox Name="textBox_PID" Text="{Binding DataContext.PatientPresenter.PatientId, ElementName=SquintWindow, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="False"
                                 FontSize="16" BorderThickness="0" TextAlignment="Center"  Width="0" HorizontalAlignment="Stretch" Height="30" Background="{Binding DataContext.PatientPresenter.TextBox_Background_Color,ElementName=SquintWindow, UpdateSourceTrigger=PropertyChanged}"
                                 VerticalAlignment="Stretch" Padding="0,3,0,0" Margin="3,3,3,3">
                        <TextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding DataContext.EnterKeyCommand_PID, ElementName=SquintWindow}"/>
                        </TextBox.InputBindings>
                    </TextBox>
                </Border>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding DataContext.isPIDVisible, ElementName=SquintWindow, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource Shrink}"/>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource Grow}"/>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="AliceBlue" Offset="0"/>
            <GradientStop Color="AliceBlue" Offset="0.5"/>
            <GradientStop Color="AliceBlue" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#B2B2B2" Offset="0"/>
            <GradientStop Color="#8C8C8C" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
            <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#80FFFFFF" Offset="0.05"/>
            <GradientStop Color="#00FFFFFF" Offset="0.25"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#00FFFFFF" Offset="0"/>
            <GradientStop Color="SteelBlue" Offset="0.4"/>
            <GradientStop Color="SteelBlue" Offset="0.6"/>
            <GradientStop Color="#00FFFFFF" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#0C000000" Offset="0"/>
            <GradientStop Color="#20000000" Offset="0.3"/>
            <GradientStop Color="#00000000" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#00000000" Offset="0"/>
            <GradientStop Color="#20000000" Offset="0.7"/>
            <GradientStop Color="#0C000000" Offset="1"/>
        </LinearGradientBrush>
        <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,0.5,0.5">
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </RadialGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </LinearGradientBrush>
        <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,-0.5,0.5">
            <GradientStop Color="#60FFFFC4" Offset="0"/>
            <GradientStop Color="#00FFFFC4" Offset="1"/>
        </RadialGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="SteelBlue" Offset="0.5385"/>
            <GradientStop Color="SteelBlue" Offset="0.5385"/>
        </LinearGradientBrush>
        <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="SteelBlue"/>
            <Setter Property="Background" Value="{StaticResource ProgressBarBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
                            <Rectangle Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2"/>
                            <Border Background="{StaticResource ProgressBarGlassyHighlight}" CornerRadius="2" Margin="1"/>
                            <Border BorderBrush="#80FFFFFF" BorderThickness="1,0,1,1" Background="{StaticResource ProgressBarTopHighlight}" Margin="1"/>
                            <Rectangle x:Name="PART_Track" Margin="1"/>
                            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                                <Grid x:Name="Foreground">
                                    <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                    <Grid x:Name="Animation" ClipToBounds="true">
                                        <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100"/>
                                    </Grid>
                                    <Grid x:Name="Overlay">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MaxWidth="15"/>
                                            <ColumnDefinition Width="0.1*"/>
                                            <ColumnDefinition MaxWidth="15"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Rectangle x:Name="LeftDark" Fill="{StaticResource ProgressBarIndicatorDarkEdgeLeft}" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                        <Rectangle x:Name="RightDark" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorDarkEdgeRight}" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                        <Rectangle x:Name="LeftLight" Grid.Column="0" Fill="{StaticResource ProgressBarIndicatorLightingEffectLeft}" Grid.Row="2"/>
                                        <Rectangle x:Name="CenterLight" Grid.Column="1" Fill="{StaticResource ProgressBarIndicatorLightingEffect}" Grid.Row="2"/>
                                        <Rectangle x:Name="RightLight" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorLightingEffectRight}" Grid.Row="2"/>
                                        <Border x:Name="Highlight1" Background="{StaticResource ProgressBarIndicatorGlassyHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                        <Border x:Name="Highlight2" Background="{StaticResource ProgressBarTopHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                    </Grid>
                                </Grid>
                            </Decorator>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="false">
                                <Setter Property="Background" TargetName="Animation" Value="#80B5FFA9"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewStyle1" TargetType="{x:Type ListView}">
            <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>-->
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                            <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Template="{DynamicResource ScrollViewerControlTemplate1}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            
                            <!--<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>--> 
                            
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ListViewStyle_NoScroll" TargetType="{x:Type ListView}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ProgressBarBackground2" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#BABABA" Offset="0"/>
            <GradientStop Color="#C7C7C7" Offset="0.5"/>
            <GradientStop Color="#BABABA" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill2" EndPoint="1,0" StartPoint="0,0">
            <GradientStop Color="#00FFFFFF" Offset="0"/>
            <GradientStop Color="#60FFFFFF" Offset="0.4"/>
            <GradientStop Color="#60FFFFFF" Offset="0.6"/>
            <GradientStop Color="#00FFFFFF" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight2" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
            <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
        </LinearGradientBrush>
        <ControlTemplate x:Key="ProgressBarNC" TargetType="{x:Type ProgressBar}">
            <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                <Rectangle Fill="AliceBlue" RadiusY="2" RadiusX="2"/>
                <Border CornerRadius="2" Margin="1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
                            <GradientStop Color="Transparent" Offset="0.5385"/>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Border BorderBrush="AliceBlue" BorderThickness="1,0,1,1" Margin="1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                            <GradientStop Color="#80FFFFFF" Offset="0.05"/>
                            <!--<GradientStop Color="SteelBlue" Offset="0.05"/>-->
                            <GradientStop Color="Transparent" Offset="0.25"/>
                        </LinearGradientBrush>
                    </Border.Background>
                </Border>
                <Rectangle x:Name="PART_Track" Margin="1"/>
                <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                    <Grid x:Name="Foreground">
                        <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                        <Grid x:Name="Animation" ClipToBounds="True">
                            <Rectangle x:Name="GR" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="Transparent" Offset="0"/>
                                        <GradientStop Color="LightSteelBlue" Offset="0.4"/>
                                        <GradientStop Color="LightSteelBlue" Offset="0.6"/>
                                        <GradientStop Color="Transparent" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <Grid x:Name="Overlay">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="15"/>
                                <ColumnDefinition Width="0.1*"/>
                                <ColumnDefinition MaxWidth="15"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="LeftDark" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="#0C000000" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="RightDark" Grid.Column="2" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                        <GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="0.7"/>
                                        <!--<GradientStop Color="#0C000000" Offset="1"/>-->
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="LeftLight" Grid.Column="0" Grid.Row="2">
                                <Rectangle.Fill>
                                    <RadialGradientBrush RadiusY="1" RadiusX="1">
                                        <RadialGradientBrush.RelativeTransform>
                                            <MatrixTransform Matrix="1,0,0,1,0.5,0.5"/>
                                        </RadialGradientBrush.RelativeTransform>
                                        <!--<GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>-->
                                        <GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="CenterLight" Grid.Column="1" Grid.Row="2">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                        <GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>-->
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="RightLight" Grid.Column="2" Grid.Row="2">
                                <Rectangle.Fill>
                                    <RadialGradientBrush RadiusY="1" RadiusX="1">
                                        <RadialGradientBrush.RelativeTransform>
                                            <MatrixTransform Matrix="1,0,0,1,-0.5,0.5"/>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Color="#60FFFFC4" Offset="0"/>
                                        <GradientStop Color="#00FFFFC4" Offset="1"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0"/>
                                        <GradientStop Color="SteelBlue" Offset="1"/>-->

                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Border x:Name="Highlight1" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0.5385"/>-->
                                        <GradientStop Color="Transparent" Offset="0.5385"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border x:Name="Highlight2" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#80FFFFFF" Offset="0.05"/>
                                        <!--<GradientStop Color="SteelBlue" Offset="0.05"/>-->
                                        <GradientStop Color="Transparent" Offset="0.25"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </Grid>
                </Decorator>
                <Border BorderBrush="AliceBlue" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                        <Setter.Value>
                            <RotateTransform Angle="-90"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsIndeterminate" Value="True">
                    <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                    <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsIndeterminate" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever">
                                <ThicknessAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:1" Storyboard.TargetName="GR" Storyboard.TargetProperty="Margin">
                                    <ThicknessAnimationUsingKeyFrames.KeyFrames>
                                        <LinearThicknessKeyFrame KeyTime="0:0:0" Value="-100,0,0,0"/>
                                        <LinearThicknessKeyFrame KeyTime="0:0:1" Value="500,0,0,0"/>
                                    </ThicknessAnimationUsingKeyFrames.KeyFrames>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
                <!--<Trigger Property="IsIndeterminate" Value="False">
                    <Setter Property="Background" TargetName="Animation" Value="Green"/>
                </Trigger>-->
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="SquintDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="AlternatingRowBackground" Value="AliceBlue"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderBrush" Value="#FF688CAF"/>
            <Setter Property="BorderThickness" Value="1"/>
            <!--<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>-->
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <!--Can enter a separator here if needed-->
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="2"/>
                                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="2" Style="{DynamicResource ScrollBarStyle1}"
                                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column="1" Grid.Row="3" Margin="0,5,0,5">
                                                <Grid.ColumnDefinitions>
                                                    <!--<ColumnDefinition Width="50"/>-->
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Style="{DynamicResource ScrollBarStyleHorizontal}"
                                                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SquintProtocolListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Foreground" Value="SteelBlue" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="2,3,0,3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="LightSteelBlue"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Width="Auto" Margin="5,5,5,5">
        <Grid.RowDefinitions>
            <RowDefinition Height="50"></RowDefinition>
            <RowDefinition Height="300"></RowDefinition>
            <RowDefinition Height="67*"></RowDefinition>
            <RowDefinition Height="288*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="570"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid Grid.Row="0" Grid.Column="0">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,5,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="CornflowerBlue" CornerRadius="5,5,5,5" Margin="5,5,0,5">
                    <TextBlock Text="Protocol" Foreground="White" FontSize="20" FontFamily="Arial"  FontWeight="Bold" VerticalAlignment="Center" Margin="10,0,0,0" Padding="0,3,0,0"></TextBlock>
                </Border>
            </Grid>
        </Grid>
        <Grid Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch">
            <ContentPresenter ContentTemplate="{StaticResource AssessmentHeader}"/>
        </Grid>
        <Grid Panel.ZIndex="2" Grid.Row="0" Grid.Column="2" SnapsToDevicePixels="True" Grid.RowSpan="4">
            <Grid Margin="5,5,0,5" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" Orientation="Vertical" VerticalAlignment="Top">
                    <Button Style="{StaticResource ButtonStyle}" ToolTip="Open/close patient" Command="{Binding ChangeVisibilityCommand}" Margin="0,0,0,10">
                        <Image Source="/Resources/user.png" Stretch="Fill" Margin="0,0,0,0"></Image>
                    </Button>
                    <Button Style="{StaticResource ButtonStyle}" ToolTip="Synchronize assessments with Eclipse" VerticalAlignment="Bottom" Command="{Binding SyncrhonizePatientCommand}" Margin="0,0,0,10">
                        <Image Source="/Resources/refreshPatient.png" Stretch="Fill" Margin="0,0,0,0"></Image>
                    </Button>
                    <Button Style="{StaticResource ButtonStyle}" Command="{Binding FontSizeIncreaseCommand}" ToolTip="Increase font size" CommandParameter="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter}" Margin="0,0,0,10">
                        <Image Source="/Resources/appbar.text.size.plus.png" Stretch="Fill" Margin="0,0,0,0" Height="36" VerticalAlignment="Bottom"></Image>
                    </Button>
                    <Button Style="{StaticResource ButtonStyle}" Command="{Binding FontSizeDecreaseCommand}" ToolTip="Decrease font size" CommandParameter="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter}" Margin="0,0,0,10">
                        <Image Source="/Resources/appbar.text.size.minus.png" Stretch="Fill" Margin="0,0,0,0" Height="36" VerticalAlignment="Bottom"></Image>
                    </Button>
                    <Button Name="SaveSessionButton" Style="{StaticResource ButtonStyle}" Command="{Binding SaveWorkspaceCommand}" ToolTip="Save patient workspace" CommandParameter="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter}" Margin="0,0,0,10">
                        <Image Source="/Resources/save_fontawesome.png" Stretch="Fill" Margin="0,0,0,0" Height="36" VerticalAlignment="Bottom"></Image>
                    </Button>
                    <Button Name="OpenSessionsButton" Style="{StaticResource ButtonStyle}" Command="{Binding LoadWorkspaceCommand}" ToolTip="Load patient workspace" Padding="0,0,0,0" CommandParameter="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter}" Margin="0,0,0,10">
                        <Image Source="/Resources/folder-open.png" Stretch="Fill" Margin="0,0,0,0" Height="36" VerticalAlignment="Bottom"></Image>
                    </Button>
                    <Popup Name="LoadSessionsPopup" PlacementTarget="{Binding ElementName=OpenSessionsButton}" Placement="Left" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"  IsOpen="{Binding SessionSelectVisibility, UpdateSourceTrigger=PropertyChanged}" >
                        <SC:HorizontalPopup DataContext="{Binding ElementName=SquintWindow}" MinHeight="35" Height="Auto"/>
                    </Popup>
                    <Popup Name="SaveSessionsPopup" PlacementTarget="{Binding ElementName=SaveSessionButton}" Placement="Left" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"  IsOpen="{Binding SessionSaveVisibility, UpdateSourceTrigger=PropertyChanged}" >
                        <SC:SavePopup DataContext="{Binding ElementName=SquintWindow}" MinHeight="35" Height="Auto"/>
                    </Popup>
                    <!--<SC:SessionsPopupButton/>-->
                </StackPanel>
                <Grid Grid.Row="1"  VerticalAlignment="Bottom">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0">
                        <Button Style="{StaticResource ButtonStyle}" ToolTip="Show/hide additional settings"
                                Margin="0,0,0,10" Command="{Binding LaunchAdminViewCommand, UpdateSourceTrigger=PropertyChanged}">
                            <Image Source="/Resources/settings.png" Stretch="Fill" Margin="0,0,0,0" Height="36" VerticalAlignment="Bottom"></Image>
                        </Button>
                    </Grid>
                </Grid>
            </Grid>
        </Grid>
        <Grid Background="Transparent" Grid.Row="1" Grid.Column="0" Grid.RowSpan="3" Height="Auto">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollViewer Grid.Row="0" Focusable="true" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto" Template="{DynamicResource ScrollViewerControlTemplate1}" CanContentScroll="True" Background="Transparent">
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid Name="AssessmentGrid" Grid.Row="0" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Background="PapayaWhip" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="5,5,5,5">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="Manage Assessments" VerticalAlignment="Center" Margin="10,10,10,10" FontSize="13" FontWeight="Bold"/>
                                    <Button Grid.Column="1" Style="{StaticResource ButtonStyle_Small}" Command="{Binding ChangeLinkVisibilityCommand}" HorizontalAlignment="Right" Margin="0,0,10,0">
                                        <Image>
                                            <Image.Style>
                                                <Style TargetType="Image">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Path=isLinkProtocolVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=False}" Value="true">
                                                            <Setter Property="Source" Value="/Resources/section_collapse.png"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=isLinkProtocolVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=False}" Value="false">
                                                            <Setter Property="Source" Value="/Resources/section_expand.png"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                    </Button>
                                </Grid>
                            </Border>
                            <Button Grid.Column="1" Name="button_AddAssessment" DockPanel.Dock="Right" ToolTip="Add new assessment"
                                    Style="{StaticResource ButtonStyle_Medium}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5,0,5,0" 
                                         Command="{Binding AddAssessmentCommand}" CommandParameter="{Binding ElementName=listbox_ProtocolList, Path=SelectedValue}">
                                <Image Source="/Resources/plus.png"></Image>
                            </Button>
                        </Grid>
                        <Grid Grid.Row="1">
                            <Grid.Tag>
                                <sys:Double>0.0</sys:Double>
                            </Grid.Tag>
                            <Grid.MaxHeight>
                                <MultiBinding Converter="{StaticResource ExpanderConverter}" ConverterParameter="200">
                                    <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="DataContext.AssessmentPresenter.AssessmentCounter" ElementName="SquintWindow"/>
                                </MultiBinding>
                            </Grid.MaxHeight>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding isLinkProtocolVisible, UpdateSourceTrigger=PropertyChanged}" Value="True" >
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <ListView HorizontalAlignment="Stretch" Name="listView_AssessmentList" ItemsSource="{Binding AssessmentPresenter.Assessments, UpdateSourceTrigger=PropertyChanged}" Margin="5,0,5,0" BorderThickness="0" VerticalAlignment="Stretch" ItemContainerStyle="{DynamicResource ListViewItemStyle}"
                                          HorizontalContentAlignment="Stretch" SelectedItem ="{Binding SelectedAssessment, UpdateSourceTrigger=PropertyChanged}" Style="{DynamicResource ListViewStyle1}">
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Grid >
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Grid Grid.Row="0" Height="Auto" >
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding AssessmentName, UpdateSourceTrigger=PropertyChanged}" FontSize="13" Background="Transparent" Margin="10,0,0,0"></TextBlock>
                                                <!--<SC:CircleCheck Grid.Column="1" HorizontalAlignment="Left" Margin="5,0,0,0" CheckHeight="20" CheckWidth="20" Pass="{Binding Warning, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"/>-->
                                                <Grid Grid.Column="1" Visibility="{Binding Warning, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment=" Left" Margin="10,0,0,0">
                                                    <Polygon Points="0,17 8,0 17,17" Fill="Transparent"  Grid.Column="1" Width="17" Height="17" Stroke="DarkOrange" StrokeThickness="2" Margin="0,-2,0,0"/>
                                                    <TextBlock Grid.Column="1" IsHitTestVisible="false" Text="!" FontWeight="Bold" HorizontalAlignment="Center" Padding="0,1,0,0" VerticalAlignment="Center" Foreground="Black"/>
                                                </Grid>
                                                <Button Grid.Column="2" Name="button_ShowAssessment" ToolTip="Pin assessment details"
                                                            Style="{DynamicResource ButtonStyle_Small}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5,5,5,5" 
                                                            Command="{Binding DataContext.ShowAssessmentCommand, ElementName=SquintWindow}" CommandParameter="{Binding}">
                                                    <Image>
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="false">
                                                                        <Setter Property="Source" Value="/Resources/pin.png"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="true">
                                                                        <Setter Property="Source" Value="/Resources/pin_remove.png"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                                <Button Grid.Column="3" Margin="0,0,0,0" Background="Transparent"  ToolTip="Delete assessment"
                                                            Style="{StaticResource ButtonStyle_Small}" HorizontalAlignment="Right" VerticalAlignment="Center"
                                                            Command="{Binding DataContext.DeleteAssessmentCommand, ElementName=SquintWindow}" CommandParameter="{Binding}">
                                                    <ContentControl>
                                                        <Image Source="/Resources/x.png"></Image>
                                                    </ContentControl>
                                                </Button>
                                            </Grid>
                                            <Grid Grid.Row="1">
                                                <Grid.Tag>
                                                    <sys:Double>0.0</sys:Double>
                                                </Grid.Tag>
                                                <Grid.Style>
                                                    <Style TargetType="Grid">
                                                        <Style.Triggers>
                                                            <DataTrigger Value="True">
                                                                <DataTrigger.Binding>
                                                                    <MultiBinding Converter="{StaticResource SelectionConverter}" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="IsSelected" />
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="DataContext.Pinned" />
                                                                    </MultiBinding>
                                                                </DataTrigger.Binding>
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                                                </DataTrigger.EnterActions>
                                                                <DataTrigger.ExitActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                                                </DataTrigger.ExitActions>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                                <Grid.MaxHeight>
                                                    <MultiBinding Converter="{StaticResource ExpanderConverter}" UpdateSourceTrigger="PropertyChanged" ConverterParameter="120">
                                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="DataContext.ComponentCount" />
                                                    </MultiBinding>
                                                </Grid.MaxHeight>
                                                <ListView  HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Name="listView_AssessmentComponentList" ItemContainerStyle="{DynamicResource ListViewItemStyle2}" 
                                                              BorderThickness ="0" ItemsSource="{Binding ACVs}">
                                                    <ListView.ItemTemplate>
                                                        <DataTemplate>
                                                            <Grid >
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition></RowDefinition>
                                                                    <RowDefinition></RowDefinition>
                                                                    <RowDefinition></RowDefinition>
                                                                </Grid.RowDefinitions>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition></ColumnDefinition>
                                                                    <ColumnDefinition></ColumnDefinition>
                                                                    <ColumnDefinition></ColumnDefinition>
                                                                    <ColumnDefinition></ColumnDefinition>
                                                                </Grid.ColumnDefinitions>
                                                                <TextBlock Grid.Column="0" Grid.RowSpan="2" Grid.Row="0" VerticalAlignment="Center"  MinWidth="80" FontSize="13" Padding="0,10,0,0" Text="{Binding ComponentName, StringFormat=' {0}:'}"/>
                                                                <TextBlock Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" MinWidth="80" Text="Select Course:"/>
                                                                <TextBlock Grid.Column="2" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" MinWidth="80" Text="Select Plan/Sum:"/>
                                                                <ComboBox Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" Style="{DynamicResource ConstraintComboBoxStyle}" MinWidth="100" 
                                                                          IsEnabled="{Binding EnableCourseSelection, UpdateSourceTrigger=PropertyChanged}"
                                                                          SelectedItem="{Binding SelectedCourse, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" DisplayMemberPath="CourseId" ItemsSource="{Binding Courses, UpdateSourceTrigger=PropertyChanged}"></ComboBox>
                                                                <ComboBox Grid.Column="2" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" Style="{DynamicResource ConstraintComboBoxStyle}" 
                                                                           IsEnabled="{Binding EnableCourseSelection, UpdateSourceTrigger=PropertyChanged}"
                                                                          MinWidth="100" SelectedItem="{Binding SelectedPlan, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" DisplayMemberPath="PlanId" ItemsSource="{Binding Plans, UpdateSourceTrigger=PropertyChanged}"></ComboBox>
                                                                <Button Grid.Column="3" Grid.Row="1" Margin="0,0,0,0" Background="Transparent"  ToolTip="Check plan" Style="{StaticResource ButtonStyle_Medium}" HorizontalAlignment="Left" VerticalAlignment="Center"
                                                                     Command="{Binding DataContext.ViewOptimizationObjectivesCommand, ElementName=SquintWindow}" CommandParameter="{Binding SelectedPlan}">
                                                                    <ContentControl>
                                                                        <Image Source="/Resources/check_plan.png"></Image>
                                                                    </ContentControl>
                                                                </Button>
                                                                <TextBlock Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" VerticalAlignment="Center" Foreground="DarkOrange" HorizontalAlignment="Center" 
                                                                           Visibility="{Binding Warning, Converter={StaticResource VisibilityConverter}}" Text="{Binding WarningString}"/>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </ListView.ItemTemplate>
                                                </ListView>
                                            </Grid>
                                        </Grid>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>

                        </Grid>
                    </Grid>
                    <Grid Name="ProtocolGrid" Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="PapayaWhip" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="5,5,5,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="Load Protocol" VerticalAlignment="Center" FontSize="13" Margin="10,10,0,10" FontWeight="Bold"/>
                                <Button Grid.Column="1" Style="{StaticResource ButtonStyle_Small}" Command="{Binding ExpandLoadProtocolCommand}" HorizontalAlignment="Right" Margin="0,0,10,0">
                                    <Image>
                                        <Image.Style>
                                            <Style TargetType="Image">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=isLoadProtocolPanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="false">
                                                        <Setter Property="Source" Value="/Resources/section_expand.png"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=isLoadProtocolPanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="true">
                                                        <Setter Property="Source" Value="/Resources/section_collapse.png"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>
                                </Button>
                            </Grid>
                        </Border>
                        <Grid Name="LoadProtocolGrid" Grid.Row="1" Margin="0,5,0,0">
                            <Grid.Tag>
                                <sys:Double>0.0</sys:Double>
                            </Grid.Tag>
                            <Grid.MaxHeight>
                                <MultiBinding Converter="{StaticResource ExpanderConverter}" ConverterParameter="400">
                                    <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Grid.MaxHeight>
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding isLoadProtocolPanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <!--<RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>-->
                            </Grid.RowDefinitions>
                            <!--<ContentControl Grid.Row="0" DataContext="{Binding DataContext.CentreComboBox, ElementName=SquintWindow}" Template="{StaticResource ComboWithHeader}"/>
                            <ContentControl Grid.Row="1" DataContext="{Binding DataContext.SiteComboBox, ElementName=SquintWindow}" Template="{StaticResource ComboWithHeader}"/>-->
                            <GroupBox Grid.Row="0" Header="Available Protocols" Margin="10,0,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ListBox Grid.Column="0" Name="listbox_ProtocolList" ItemsSource="{Binding Protocol.Protocols,  UpdateSourceTrigger=PropertyChanged}" Margin="5,5,5,5" BorderThickness="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Style="{DynamicResource ListBoxStyle1}"
                                                 DisplayMemberPath="ProtocolName" SelectedValuePath="ProtocolName" ItemContainerStyle="{DynamicResource SquintProtocolListBoxItemStyle}" Background="White">
                                    </ListBox>
                                    <Button Grid.Column="1" Name="button_OpenProtocol" ToolTip="Load selected protocol" Style="{StaticResource ButtonStyle_Medium}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="5,5,5,5" 
                                           Command="{Binding LoadSelectedProtocolCommand}" CommandParameter="{Binding ElementName=listbox_ProtocolList, Path=SelectedValue}">
                                        <Image Source="/Resources/check.png"></Image>
                                    </Button>
                                </Grid>
                            </GroupBox>
                        </Grid>
                    </Grid>
                    <Grid Name="CurrentProtocolGrid" Grid.Row="2" Height="Auto" Margin="0,0,0,10" VerticalAlignment="Top" Visibility="{Binding isProtocolLoaded, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <Border Grid.Column="0" Background="PapayaWhip"  CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="5,5,5,0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Row="0" Text="Current Protocol" FontSize="13" VerticalAlignment="Center" Margin="10,10,0,10" FontWeight="Bold"/>
                                    <TextBlock Grid.Column="1" Text="{Binding Protocol.ProtocolName, UpdateSourceTrigger=PropertyChanged}" TextAlignment="Left" HorizontalAlignment="Right" VerticalAlignment="Center" Foreground="SteelBlue" FontSize ="13" Margin="10,5,20,5" Padding="10,0,0,0" FontWeight="Bold">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <!--<DataTrigger Binding="{Binding isPIDVisible}" Value="False">
                                                <Setter Property="Height" Value="0"></Setter>
                                            </DataTrigger>-->
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </Grid>
                            </Border>

                        </Grid>
                        <Grid Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0" Background="PeachPuff" MinHeight="30" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10,5,5,5">
                                    <TextBlock Text="Components" VerticalAlignment="Center" Margin="10,0,0,0" FontWeight="Bold">
                                    </TextBlock>
                                </Border>
                                <Button Grid.Column="1" Style="{DynamicResource ButtonStyle_Small}">
                                    <Image Source="/Resources/plus.png"></Image>
                                </Button>
                            </Grid>
                            <ListView Grid.Row="1" Name="ComponentList" Style="{StaticResource ListViewStyle_NoScroll}" ItemsSource="{Binding Protocol.Components, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" BorderThickness="0" ItemContainerStyle="{StaticResource ListViewItemStyle}" HorizontalContentAlignment="Stretch" >
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Grid Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Grid.Column="0" Text="{Binding ComponentName, UpdateSourceTrigger=PropertyChanged}" FontSize="13" Background="Transparent" Margin="10,0,0,0" VerticalAlignment="Center"/>
                                                <TextBlock Grid.Column="1" Text="{Binding ComponentTDFDescription, UpdateSourceTrigger=PropertyChanged}" FontSize="13" Foreground="SteelBlue" Background="Transparent" Margin="10,0,0,0" VerticalAlignment="Center"/>
                                                <Button Grid.Column="2" Name="button_ShowComponent" ToolTip="Pin component details"
                                                        Style="{DynamicResource ButtonStyle_Small}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5,0,5,0" 
                                                            Command="{Binding DataContext.ShowComponentCommand, ElementName=SquintWindow}" CommandParameter="{Binding}">
                                                    <Image>
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="false">
                                                                        <Setter Property="Source" Value="/Resources/pin.png"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="true">
                                                                        <Setter Property="Source" Value="/Resources/pin_remove.png"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                            <Grid Grid.Row="1">
                                                <Grid.Tag>
                                                    <sys:Double>0.0</sys:Double>
                                                </Grid.Tag>
                                                <Grid.Style>
                                                    <Style TargetType="Grid">
                                                        <Style.Triggers>
                                                            <DataTrigger Value="True">
                                                                <DataTrigger.Binding>
                                                                    <MultiBinding Converter="{StaticResource SelectionConverter}" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="IsSelected" />
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="DataContext.Pinned" />
                                                                    </MultiBinding>
                                                                </DataTrigger.Binding>
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                                                </DataTrigger.EnterActions>
                                                                <DataTrigger.ExitActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                                                </DataTrigger.ExitActions>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                                <Grid.MaxHeight>
                                                    <MultiBinding Converter="{StaticResource ExpanderConverter}" UpdateSourceTrigger="PropertyChanged" ConverterParameter="100">
                                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                                    </MultiBinding>
                                                </Grid.MaxHeight>
                                                <Grid Margin="10,0,0,0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="*"/>
                                                    </Grid.RowDefinitions>
                                                    <Label Grid.Column="0" Grid.Row="0"  Content="Type:" Padding="7,7,20,7"></Label>
                                                    <ComboBox Grid.Column="1" Grid.Row="0" HorizontalAlignment="Right" HorizontalContentAlignment="Center" Width="100" Margin="10,5,40,5" 
                                                                  SelectedItem="{Binding ComponentType}" Style="{StaticResource ConstraintComboBoxStyle}"
                                                                  ItemsSource="{Binding AvailableComponentTypes}">
                                                        <ComboBox.ItemTemplate>
                                                            <DataTemplate>
                                                                <TextBlock Text="{Binding Converter={StaticResource EnumDisplayTypesConverter}, ConverterParameter=ComponentType}"/>
                                                            </DataTemplate>
                                                        </ComboBox.ItemTemplate>
                                                    </ComboBox>
                                                    <Label Grid.Column="0" Grid.Row="1"  Content="Reference Dose (cGy):" Padding="7,7,20,7"></Label>
                                                    <TextBox Grid.Column="1" Grid.Row="1" Text="{Binding ReferenceDose}" Margin="20,5,40,5" Width="100" HorizontalAlignment="Right" HorizontalContentAlignment="Center" Background="AliceBlue" local:TextBoxExtensions.UpdateSourceOnKey="Return"></TextBox>
                                                    <Label Grid.Column="0" Grid.Row="2"  Content="Fractions (#):" Padding="7,7,20,7"></Label>
                                                    <TextBox Grid.Column="1" Grid.Row="2" Text="{Binding NumFractions}" Margin="60,5,40,5" Width="100" HorizontalAlignment="Right" HorizontalContentAlignment="Center" Background="AliceBlue" local:TextBoxExtensions.UpdateSourceOnKey="Return"></TextBox>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                            <Grid Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0"  Background="PeachPuff" MinHeight="30" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10,5,5,5">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Text="Structures" VerticalAlignment="Center" Margin="10,0,0,0" FontWeight="Bold"/>
                                        <Button Grid.Column="1" Style="{StaticResource ButtonStyle_Small}" Command="{Binding ExpandStructuresCommand}" HorizontalAlignment="Right" Margin="0,0,10,0" Padding="10,10,10,10">
                                            <Image>
                                                <Image.Style>
                                                    <Style TargetType="Image">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Path=isStructurePanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="false">
                                                                <Setter Property="Source" Value="/Resources/section_expand_small.png"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Path=isStructurePanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="true">
                                                                <Setter Property="Source" Value="/Resources/section_collapse_small.png"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </Button>
                                    </Grid>
                                </Border>
                                <Button Grid.Column="1" Style="{DynamicResource ButtonStyle_Small}" Command="{Binding ElementName=SquintWindow, Path=DataContext.AddStructureCommand}">
                                    <Image Source="/Resources/plus.png"></Image>
                                </Button>
                            </Grid>
                            <Grid Grid.Row="3">
                                <Grid.Tag>
                                    <sys:Double>0.0</sys:Double>
                                </Grid.Tag>
                                <Grid.MaxHeight>
                                    <MultiBinding Converter="{StaticResource ExpanderConverter}" ConverterParameter="500">
                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                    </MultiBinding>
                                </Grid.MaxHeight>
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding isStructurePanelVisible, UpdateSourceTrigger=PropertyChanged, FallbackValue=True}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="2*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border DockPanel.Dock="Top" Grid.Column="0" Grid.Row="1" Background="AntiqueWhite" MinHeight="30" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,10,5">
                                    <TextBlock Grid.Row="0" Text="Protocol Definition" VerticalAlignment="Center" Margin="10,0,0,0" FontWeight="Bold"/>
                                </Border>
                                <Border DockPanel.Dock="Top" Grid.Column="1" Grid.Row="1" Background="AntiqueWhite" MinHeight="30" CornerRadius="5,5,5,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,5,15,5">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Text="Current structure set:" VerticalAlignment="Center" Margin="10,0,0,0" FontWeight="Bold"/>
                                        <ComboBox Grid.Column="1" Style="{StaticResource ConstraintComboBoxStyle}" ItemsSource="{Binding PatientPresenter.StructureSets}" SelectedItem="{Binding PatientPresenter.CurrentStructureSet, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  DisplayMemberPath="ComboBoxDisplay" Margin="5,3,10,3"/>
                                    </Grid>
                                    
                                </Border>
                                <ListView Grid.Row="2" Grid.ColumnSpan="2" Margin="0,0,10,0" Name="StructuresTree" Style="{StaticResource ListViewStyle1}" ItemsSource="{Binding Protocol.Structures, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" BorderThickness="0" ItemContainerStyle="{StaticResource ListViewItemStyle}" HorizontalContentAlignment="Stretch">
                                    <ListView.ItemTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Grid Grid.Row="0">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="1.5*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBlock Grid.Column="0" Text="{Binding ProtocolStructureName, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"  FontSize="13" Background="Transparent" Margin="10,3,0,0"></TextBlock>
                                                    <Grid Grid.Column="1" Margin="20,0,0,0">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="*"/>
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock  Grid.Column="0" Text="{Binding Path=EclipseStructureName, Mode=OneWay}" HorizontalAlignment="Left" Foreground="SteelBlue" FontSize="13" Background="Transparent" ></TextBlock>
                                                        <Grid Grid.Column="1" HorizontalAlignment="Right" Visibility="{Binding LabelIsConsistent, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
                                                            <Polygon Points="0,17 8,0 17,17" Fill="Transparent"  Grid.Column="1" Width="17" Height="17" Stroke="DarkOrange" StrokeThickness="2" ToolTip="{Binding LabelMismatchTooltip, UpdateSourceTrigger=PropertyChanged}" Margin="0,-2,0,0"/>
                                                            <TextBlock Grid.Column="1" IsHitTestVisible="false" Text="!" FontWeight="Bold" HorizontalAlignment="Center" Padding="0,1,0,0" VerticalAlignment="Center" Foreground="Black"/>
                                                        </Grid>

                                                    </Grid>
                                                </Grid>
                                                <Grid Grid.Row="1">
                                                    <Grid.Tag>
                                                        <sys:Double>0.0</sys:Double>
                                                    </Grid.Tag>
                                                    <Grid.MaxHeight>
                                                        <MultiBinding Converter="{StaticResource ExpanderConverter}" ConverterParameter="150">
                                                            <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                                        </MultiBinding>
                                                    </Grid.MaxHeight>
                                                    <Grid.Style>
                                                        <Style TargetType="Grid">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorLevel=1, AncestorType=ListViewItem}, UpdateSourceTrigger=PropertyChanged, Path=IsSelected}" Value="True">
                                                                    <DataTrigger.EnterActions>
                                                                        <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                                                    </DataTrigger.EnterActions>
                                                                    <DataTrigger.ExitActions>
                                                                        <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                                                    </DataTrigger.ExitActions>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Grid.Style>
                                                    <GroupBox Header="Structure Properties" Margin="0,5,0,0" HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                        <Grid>
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="Auto"/>
                                                                <RowDefinition Height="Auto"/>
                                                                <RowDefinition Height="*"/>
                                                            </Grid.RowDefinitions>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="Auto"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Structure Name:" Margin="7,5,7,5" HorizontalAlignment="Left" Visibility="{Binding isUserAdded, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                                                            <TextBox Grid.Row="0" Grid.Column="1" HorizontalAlignment="Center" Width="150" MaxLength="30" Text="{Binding ProtocolStructureName, Mode=TwoWay}" KeyUp="TextBox_KeyEnterUpdate" Visibility="{Binding isUserAdded, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                                                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Structure Id:" Margin="7,5,7,5" HorizontalAlignment="Left"></TextBlock>
                                                            <ComboBox Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" MaxWidth="150" HorizontalContentAlignment="Center" Width="Auto" Margin="10,5,10,5" Style="{StaticResource ConstraintComboBoxStyle}"
                                                                  MaxDropDownHeight="150"    DisplayMemberPath="Id"
                                                                  SelectedItem="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=DataContext.ES, Mode=OneWayToSource}"
                                                                      Background="AliceBlue">
                                                                <ComboBox.ItemsSource>
                                                                    <MultiBinding Converter="{StaticResource SortStructuresConverter}" Mode="OneWay">
                                                                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}" Path="DataContext"  Mode="OneWay"/>
                                                                        <Binding ElementName="SquintWindow" Path="DataContext.Protocol.AvailableStructureIds" UpdateSourceTrigger="PropertyChanged" Mode="OneWay"/>
                                                                    </MultiBinding>
                                                                </ComboBox.ItemsSource>
                                                            </ComboBox>
                                                            <Grid Grid.Row="2" Grid.ColumnSpan="2">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <TextBlock Grid.Column="0" Text="Structure Label:" HorizontalAlignment="Left" Margin="7,5,7,5"/>
                                                                <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Center">
                                                                    <TextBlock  Text="{Binding DataContext.LabelName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                                                                       Margin="7,5,7,5" HorizontalAlignment="Center" Foreground="SteelBlue"/>
                                                                    <TextBlock  Text="{Binding DataContext.AlphaBetaRatio, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                                                                       Margin="7,5,7,5" HorizontalAlignment="Left" Foreground="SteelBlue"/>
                                                                </StackPanel>
                                                                <Button Grid.Column="2" Style="{StaticResource ButtonStyle_Small}" HorizontalAlignment="Right" Margin="0,0,5,0">
                                                                    <Image Source="/Resources/edit.png"></Image>
                                                                </Button>
                                                            </Grid>

                                                        </Grid>
                                                    </GroupBox>
                                                </Grid>
                                            </Grid>
                                        </DataTemplate>
                                    </ListView.ItemTemplate>
                                </ListView>
                            </Grid>
                            <Grid Grid.Row="4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="5" Background="PeachPuff" CornerRadius="5,5,5,5" MinHeight="30" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10,5,5,5">
                                    <TextBlock Text="Constraints" VerticalAlignment="Center" FontWeight="Bold" Margin="10,0,0,0">
                                    </TextBlock>
                                </Border>
                                <Button Grid.Column="1" Style="{DynamicResource ButtonStyle_Small}" Command="{Binding ElementName=SquintWindow, Path=DataContext.AddConstraintCommand}" >
                                    <Image Source="/Resources/plus.png"></Image>
                                </Button>
                            </Grid>
                            <ListView Name="ConstraintListView" Grid.Row="5" Style="{StaticResource ListViewStyle_NoScroll}" ItemsSource="{Binding Protocol.Constraints, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedIndex="{Binding Protocol.SelectedIndex}" VerticalAlignment="Stretch" BorderThickness="0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" ItemContainerStyle="{DynamicResource DraggableListViewItemStyle}"
                                      SelectedItem="{Binding Protocol.SelectedConstraint, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" dd:DragDrop.IsDragSource="True" DragDrop.DragOver="ListView_DragOver" MouseUp="ConstraintListView_MouseUp" MouseLeave="ConstraintListView_MouseLeave" MouseEnter="ConstraintListView_MouseEnter">
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Grid Grid.Row="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Image Name ="DragImage"  Grid.Column="0" Height="20" Width="18" Stretch="Fill" RenderOptions.BitmapScalingMode="HighQuality" Source="\Resources\align.png" ToolTip="Drag to re-order" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5,2,5,2" MouseDown="DragImage_MouseDown"/>
                                                <ComboBox Grid.Column="1" HorizontalAlignment="Stretch" Width="120" ItemsSource="{Binding ElementName=SquintWindow, Path=DataContext.Protocol.Structures}" DisplayMemberPath="ProtocolStructureName" Style="{StaticResource ConstraintComboBoxStyle}"
                                                                  MaxDropDownHeight="100" 
                                                                  VerticalAlignment="Center" 
                                                          SelectedItem="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ListViewItem}}, Path=DataContext.SS, Converter={StaticResource GetConstraintStructureConverter}, Mode=TwoWay}"/>
                                                <!--<TextBlock  Grid.Column="2" VerticalAlignment="Center" Text="{Binding ShortConstraintDefinition, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Margin="5,0,10,0"></TextBlock>-->
                                                <StackPanel Grid.Column="2" Orientation="Horizontal">
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding ShortConstraintDefinition, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Margin="5,0,0,0"></TextBlock>
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding IsAddedStatus, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Foreground="ForestGreen" FontStyle="Italic" Margin="5,0,0,0"></TextBlock>
                                                    <TextBlock VerticalAlignment="Center" Text="{Binding ChangeStatusString, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Foreground="DarkOrange" FontStyle="Italic" Margin="5,0,0,0"></TextBlock>
                                                </StackPanel>
                                                <ComboBox  Grid.Column="3" HorizontalAlignment="Right" MinWidth="50" Margin="0,0,0,0" VerticalAlignment="Center" ItemsSource="{Binding Components}" SelectedItem="{Binding Component}" Style="{StaticResource ConstraintComboBoxStyle}">
                                                    <ComboBox.ItemTemplate>
                                                        <DataTemplate>
                                                            <TextBlock Text="{Binding ComponentName}"/>
                                                        </DataTemplate>
                                                    </ComboBox.ItemTemplate>
                                                </ComboBox>
                                                <Button Grid.Column="4" Name="ConstraintInfoButton" ToolTip="Constraint Information" Style="{DynamicResource ButtonStyle_Small}" Margin="5,5,0,5" 
                                                        Command="{Binding DataContext.GetConstraintInformationCommand, ElementName=SquintWindow}" CommandParameter="{Binding}">
                                                    <Image Source="/Resources/appbar.question.png"/>
                                                </Button>
                                                <Popup Name="ConstraintInfoPopup" PlacementTarget="{Binding ElementName=SquintWindow}" Placement="Center" StaysOpen="False" AllowsTransparency="True" PopupAnimation="Fade"  IsOpen="{Binding ConstraintInfoVisibility, UpdateSourceTrigger=PropertyChanged}" >
                                                    <SC:ConstraintInformation DataContext="{Binding}" MinHeight="35" Height="Auto"/>
                                                </Popup>
                                                <Button Grid.Column="5" ToolTip="Pin constraint details"
                                                            Style="{DynamicResource ButtonStyle_Small}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,5,5,5" 
                                                            Command="{Binding DataContext.PinConstraintCommand, ElementName=SquintWindow}" CommandParameter="{Binding}">
                                                    <Image>
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="false">
                                                                        <Setter Property="Source" Value="/Resources/pin.png"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=Pinned, UpdateSourceTrigger=PropertyChanged}" Value="true">
                                                                        <Setter Property="Source" Value="/Resources/pin_remove.png"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Button>
                                            </Grid>
                                            <Grid Grid.Row="1">
                                                <Grid.Tag>
                                                    <sys:Double>0.0</sys:Double>
                                                </Grid.Tag>
                                                <Grid.MaxHeight>
                                                    <MultiBinding Converter="{StaticResource ExpanderConverter}" ConverterParameter="100">
                                                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}"/>
                                                    </MultiBinding>
                                                </Grid.MaxHeight>
                                                <Grid.Style>
                                                    <Style TargetType="Grid">
                                                        <Style.Triggers>
                                                            <DataTrigger Value="True">
                                                                <DataTrigger.Binding>
                                                                    <MultiBinding Converter="{StaticResource SelectionConverter}" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="IsSelected" />
                                                                        <Binding RelativeSource="{RelativeSource AncestorLevel=1, AncestorType=ListViewItem}" UpdateSourceTrigger="PropertyChanged" Path="DataContext.Pinned" />
                                                                        <Binding ElementName="SquintWindow" Path="DataContext.Protocol.DragSelected" />
                                                                    </MultiBinding>
                                                                </DataTrigger.Binding>
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource ExpandPanel}"/>
                                                                </DataTrigger.EnterActions>
                                                                <DataTrigger.ExitActions>
                                                                    <BeginStoryboard Storyboard="{StaticResource CollapsePanel}"/>
                                                                </DataTrigger.ExitActions>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                                <GroupBox Header="Edit Constraint" Background="Transparent">
                                                    <Grid>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto"/>
                                                            <RowDefinition Height="*"/>
                                                        </Grid.RowDefinitions>
                                                        <StackPanel Grid.Row="0" Orientation="Horizontal">
                                                            <ComboBox ItemsSource ="{Binding Path=ConstraintTypes, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding ConstraintType}" Width="50" HorizontalAlignment="Left" Style="{StaticResource ConstraintComboBoxStyle}"></ComboBox>
                                                            <TextBox Text ="{Binding ConstraintValue, UpdateSourceTrigger=PropertyChanged,  Mode=TwoWay}" Style="{StaticResource ConstraintTextBoxStyle}" Width="50" local:TextBoxExtensions.UpdateSourceOnKey="Return"
                                                                        Foreground="{Binding ConstraintValueColor, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                                            <ComboBox ItemsSource ="{Binding Path=ConstraintUnitTypes, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding ConstraintUnit}" Width="50" HorizontalAlignment="Left" Style="{StaticResource ConstraintComboBoxStyle}">
                                                                <ComboBox.ItemTemplate>
                                                                    <DataTemplate>
                                                                        <TextBlock Text="{Binding Converter={StaticResource EnumDisplayTypesConverter}}"/>
                                                                    </DataTemplate>
                                                                </ComboBox.ItemTemplate>
                                                            </ComboBox>
                                                            <ComboBox ItemsSource ="{Binding Path=AvailableReferenceTypes, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding ReferenceType}" Width="50" HorizontalAlignment="Left" Style="{StaticResource ConstraintComboBoxStyle}">
                                                                <ComboBox.ItemTemplate>
                                                                    <DataTemplate>
                                                                        <TextBlock Text="{Binding Converter={StaticResource EnumDisplayTypesConverter}}"/>
                                                                    </DataTemplate>
                                                                </ComboBox.ItemTemplate>
                                                            </ComboBox>
                                                            <TextBox Text ="{Binding ReferenceValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Style="{StaticResource ConstraintTextBoxStyle}" Foreground="{Binding ReferenceValueColor, UpdateSourceTrigger=PropertyChanged}"
                                                                     Width="50" local:TextBoxExtensions.UpdateSourceOnKey="Return"></TextBox>
                                                            <ComboBox ItemsSource ="{Binding Path=AvailableReferenceUnitTypes, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding ReferenceUnit}" Width="50" HorizontalAlignment="Left" Style="{StaticResource ConstraintComboBoxStyle}">
                                                                <ComboBox.ItemTemplate>
                                                                    <DataTemplate>
                                                                        <TextBlock Text="{Binding Converter={StaticResource EnumDisplayTypesConverter}}"/>
                                                                    </DataTemplate>
                                                                </ComboBox.ItemTemplate>
                                                            </ComboBox>
                                                        </StackPanel>
                                                        <StackPanel Grid.Row="1" Orientation="Horizontal">
                                                            <Border CornerRadius="5,5,5,5" Margin ="5,0,0,0" Background="MediumSeaGreen" Height="25" Width="80">
                                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                                    <TextBlock Text="{Binding ReferenceType, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,2,0" Foreground="White" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                    <TextBox Text="{Binding StopValue, Converter={StaticResource DoubleToDisplay}, Mode=TwoWay}" Foreground="White" Background="Transparent" BorderBrush="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" local:TextBoxExtensions.UpdateSourceOnKey="Return"/>
                                                                    <TextBlock Text="{Binding ReferenceUnit, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Margin="2,0,0,0" Foreground="White" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </Border>
                                                            <Border CornerRadius="5,5,5,5" Margin ="10,0,0,0" Background="PaleGreen" Height="25" Width="80">
                                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                                    <TextBlock Text="{Binding ReferenceType, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,2,0" Foreground="Black" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                    <TextBlock Text="{Binding ReferenceValue, Mode=TwoWay, Converter={StaticResource DoubleToDisplay}}" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center" local:TextBoxExtensions.UpdateSourceOnKey="Return"/>
                                                                    <TextBlock Text="{Binding ReferenceUnit, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" Margin="2,0,0,0" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </Border>
                                                            <Border CornerRadius="5,5,5,5" Margin ="10,0,0,0" Background="DarkOrange" Height="25" Width="80">
                                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                                    <TextBlock Text="{Binding OppositeReferenceTypeString, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,2,0" Foreground="Black" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                    <TextBox Text="{Binding MinorViolation, Converter={StaticResource DoubleToDisplay}, Mode=TwoWay}" Background="Transparent" HorizontalAlignment="Center" BorderBrush="Transparent" VerticalAlignment="Center" local:TextBoxExtensions.UpdateSourceOnKey="Return"/>
                                                                    <TextBlock Text="{Binding ReferenceUnit, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Background="Transparent" Margin="2,0,0,0" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </Border>
                                                            <Border CornerRadius="5,5,5,5"  Margin ="10,0,0,0" Background="Tomato" Height="25" Width="80">
                                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                                    <TextBlock Text="{Binding OppositeReferenceTypeString, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,2,0" Foreground="Black" Background="Transparent" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                    <TextBox Text="{Binding MajorViolation, Converter={StaticResource DoubleToDisplay}, Mode=TwoWay}" Background="Transparent" HorizontalAlignment="Center" BorderBrush="Transparent" VerticalAlignment="Center" local:TextBoxExtensions.UpdateSourceOnKey="Return"/>
                                                                    <TextBlock Text="{Binding ReferenceUnit, Mode=OneWay, Converter={StaticResource EnumDisplayTypesConverter}, UpdateSourceTrigger=PropertyChanged}" Background="Transparent"  Margin="2,0,0,0" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
                                                                </StackPanel>
                                                            </Border>
                                                        </StackPanel>
                                                    </Grid>
                                                </GroupBox>
                                            </Grid>
                                        </Grid>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </Grid>
                    </Grid>
                </Grid>
            </ScrollViewer>
            <Grid Grid.Row="1" Margin="0,10,0,10">
                <Grid.Visibility>
                    <MultiBinding Converter="{StaticResource VisibilityMultiConverter}">
                        <Binding ElementName="SquintWindow" Path="DataContext.AssessmentPresenter.WaitingForUpdate" UpdateSourceTrigger="PropertyChanged" Mode="OneWay"/>
                        <Binding Path="isLoading" UpdateSourceTrigger="PropertyChanged" Mode="OneWay"/>
                    </MultiBinding>
                </Grid.Visibility>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ProgressBar Grid.Column="0" Height="25" DockPanel.Dock="Left" BorderBrush="Black" Minimum="0" Maximum="100" Margin="10,0,5,0" VerticalAlignment="Stretch"  Template="{StaticResource ProgressBarNC}"
                                     IsIndeterminate="True">
                </ProgressBar>
                <TextBlock Grid.Column="0" Text="{Binding LoadingString}" Visibility="{Binding isLoading, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}, FallbackValue=Visibility.Visible}"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <TextBlock Grid.Column="0" Text="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter.WaitingDescription, UpdateSourceTrigger=PropertyChanged,FallbackValue=''}" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                               Visibility="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter.WaitingForUpdate, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}, FallbackValue=Visible}"></TextBlock>
            </Grid>
        </Grid>
        <DataGrid Name="dg" Grid.Row="1" Grid.RowSpan="3" Grid.Column="1" BorderThickness="0" Background="White" Margin="15,5,5,5" RowHeaderStyle="{DynamicResource SquintRowHeaderStyle}" 
                  AutoGenerateColumns="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ColumnHeaderStyle="{DynamicResource SquintColumnHeaderStyle}" 
                      local:DataGridColumnsBehavior.BindableColumns="{Binding AssessmentPresenter.AssessmentColumns}" RowHeaderWidth="{Binding ElementName=SquintWindow, Path=DataContext.AssessmentPresenter.RowHeaderWidth, UpdateSourceTrigger=PropertyChanged}"
                  ItemsSource="{Binding Protocol.Constraints, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" GridLinesVisibility="None" Style="{DynamicResource SquintDataGridStyle}"
                  Visibility="{Binding ProtocolCheckVisible, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}">
        </DataGrid>
        <Grid Grid.Row="1" Grid.RowSpan="3" Grid.Column="1" Margin="10,0,0,0" Visibility="{Binding PlanCheckVisible, Converter={StaticResource VisibilityConverter}, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding PlanCheckVisible}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border Grid.Row="0" CornerRadius="5,5,5,5" Background="LightSteelBlue" Margin="0,0,0,0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="Plan Checklist" FontSize="18" FontWeight="Bold" Foreground="White" Margin="5,5,0,5" VerticalAlignment="Center" Grid.Column="0"></TextBlock>
                    <Button Grid.Column="1" ToolTip="Close checklist" Style="{StaticResource ButtonStyle_Small}" HorizontalAlignment="Right" VerticalAlignment="Center" Background="LightSteelBlue" Margin="0,0,5,0"
                        Command="{Binding DataContext.CloseCheckListCommand, ElementName=SquintWindow}">
                        <ContentControl>
                            <Image Source="/Resources/section_collapse.png"></Image>
                        </ContentControl>
                    </Button>
                </Grid>
            </Border>
            <SC:LoadingControl Grid.Row="1" DataContext="{Binding DataContext, ElementName=SquintWindow}"
                               LoadingMessage="{Binding PlanCheckLoadingMessage, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                Visibility="{Binding isPlanCheckCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityConverter}}"/>
            <ScrollViewer Grid.Row="1" Template="{DynamicResource ScrollViewerControlTemplate1}" CanContentScroll="True" Background="Transparent" VerticalScrollBarVisibility="Auto" PreviewMouseWheel="ScrollViewer_PreviewMouseWheel"
                          Visibility="{Binding isPlanCheckCalculating, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource VisibilityInverseConverter}}">
                <Grid Background="Transparent" Margin="5,5,5,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Grid.Row="0" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,5,0,0">
                        <TextBlock Text="Simulation" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <StackPanel Grid.Row="1" Orientation="Vertical" >
                        <TextBlock Grid.Column="0" FontWeight="Bold" Text="CT Details" FontSize="13" Margin="5,5,0,5"/>
                        <Border  Background="Black" CornerRadius="1,1,1,1" Height="2" Margin="5,3,10,5" HorizontalAlignment="Stretch"/>
                        <SC:TestView DataContext="{Binding Simulation_ViewModel}" TestItems="{Binding Tests}" SetReferenceHeader="Reference Value"/>
                    </StackPanel>
                    <Border Grid.Row="2" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,15,0,10">
                        <TextBlock Text="Calculation" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <StackPanel Grid.Row="3" Orientation="Vertical">
                        <TextBlock Grid.Column="0" FontWeight="Bold" Text="Calculation Details" FontSize="13" Margin="5,5,0,5"/>
                        <Border  Background="Black" CornerRadius="1,1,1,1" Height="2" Margin="5,3,10,5" HorizontalAlignment="Stretch"/>
                        <SC:TestView DataContext="{Binding Calculation_ViewModel}"  TestItems ="{Binding Tests}" SetReferenceHeader="Reference Value" />
                    </StackPanel>
                    <Border Grid.Row="4" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,15,0,10">
                        <TextBlock Text="Prescription" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <StackPanel Grid.Row="5" Orientation="Vertical">
                        <TextBlock Grid.Column="0" FontWeight="Bold" Text="Prescription Details" FontSize="13" Margin="5,5,0,5"/>
                        <Border  Background="Black" CornerRadius="1,1,1,1" Height="2" Margin="5,3,10,5" HorizontalAlignment="Stretch"/>
                        <SC:TestView DataContext="{Binding Prescription_ViewModel}" TestItems ="{Binding Tests}"  SetReferenceHeader="Reference Value" />
                    </StackPanel>
                    <Border Grid.Row="6" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,15,0,10">
                        <TextBlock Text="Target Structures" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <StackPanel Grid.Row="7" Orientation="Vertical">
                        <TextBlock Grid.Column="0" FontWeight="Bold" Text="Target Structure Checks" FontSize="13" Margin="5,5,0,5"/>
                        <Border  Background="Black" CornerRadius="1,1,1,1" Height="2" Margin="5,3,10,5" HorizontalAlignment="Stretch"/>
                        <SC:TestView DataContext="{Binding Targets_ViewModel}" TestItems ="{Binding Tests}" SetReferenceHeader="Reference Value" />
                    </StackPanel>
                    <Border Grid.Row="8" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,10,0,0">
                        <TextBlock Text="Optimization" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <StackPanel Grid.Row="9" Orientation="Vertical">
                        <SC:ObjectiveControl  DataContext="{Binding Objectives_ViewModel}" Background="Transparent" />
                    </StackPanel>
                    <Border Grid.Row="10" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,15,0,10">
                        <TextBlock Text="Beams" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <SC:BeamCheckView Grid.Row="11" DataContext="{Binding Beam_ViewModel}" Background="Transparent" />
                    <Border Grid.Row="12" CornerRadius="5,5,5,5" Background="CornflowerBlue" Margin="0,15,0,10">
                        <TextBlock Text="Imaging" Foreground="White" FontSize="14" Margin="10,5,5,5"/>
                    </Border>
                    <SC:ImagingControl Grid.Row="13" DataContext="{Binding Imaging_ViewModel}"/>

                </Grid>
            </ScrollViewer>

        </Grid>
    </Grid>
</Window>
